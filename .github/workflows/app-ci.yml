name: App CI Pipeline

on: 
  push:
    branches:
      - main

jobs:
    integration-test:
        runs-on: ubuntu-latest

        services:
          db:
              image: mysql:8.0
              env:
                  MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
                  MYSQL_DATABASE: ${{secrets.DB_NAME}}
              ports:
                  - 3306:3306
              options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Install dependencies
              run: npm install

            - name: Run tests
              env:
                  DB_NAME: ${{secrets.DB_NAME}}
                  DB_HOST: ${{secrets.DB_HOST}}
                  DB_DIALECT: ${{secrets.DB_DIALECT}}
                  DB_USERNAME: ${{secrets.DB_USERNAME}}
                  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
                  PORT: ${{secrets.PORT}}
              run: npm test

    build-artifact:
        runs-on: ubuntu-latest
        needs: integration-test

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            # build on github actions runner
            - name: Create zip artifact
              run: zip -r webapp.zip . -x 'tests/**' -x '.github/**'
                echo "Artifact created"

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                name: webapp
                path: webapp.zip

    build-ami:
      runs-on: ubuntu-latest
      needs: build-artifact
      environment: ${{ vars.ENVIRONMENT }}

      steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION_DEV }}

            - name: Download application artifact
              uses: actions/download-artifact@v4
              with:
                name: webapp
                path: ./app

            - name: Unzip application artifact
              run: |
                unzip ./app/webapp.zip -d /opt

            # Build the AMI using Packer
            - name: Build AMI with Packer
              run: |
                packer init ./packer
                packer build \
                  -var 'source_ami=${{ vars.SOURCE_AMI }}' \
                  -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
                  -var 'ssh_username=${{ secrets.SSH_USERNAME }}' \
                  -var 'subnet_id=${{ secrets.SUBNET_ID }}' \
                  -var 'vpc_id=${{ secrets.VPC_ID }}' \
                  -var 'aws_region=${{ secrets.AWS_REGION_DEV }}' \
                  -var 'github_token=${{ secrets.TOKEN_GITHUB }}' \
                  -var 'github_repo=${{ github.repository }}' \
                  ./packer/aws-ubuntu.pkr.hcl
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION_DEV }}

            - name: Get Latest AMI ID
              id: ami
              run: |
                AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=csye6225-ubuntu-ami_*" --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
                echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
      
            - name: Create new Launch Template Version
              id: create_lt_version
              run: |
                aws ec2 create-launch-template-version \
                  --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \
                  --version-description "New Launch Template version with latest AMI" \
                  --source-version 1 \
                  --launch-template-data "{\"ImageId\":\"${AMI_ID}\"}"
                NEW_LT_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} --query "LaunchTemplateVersions[0].VersionNumber" --output text)
                echo "NEW_LT_VERSION=${NEW_LT_VERSION}" >> $GITHUB_ENV
      
            - name: Update Auto Scaling Group with New Launch Template Version
              run: |
                aws autoscaling update-auto-scaling-group \
                  --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
                  --launch-template "LaunchTemplateName=${{ secrets.LAUNCH_TEMPLATE_NAME }},Version=${NEW_LT_VERSION}"
      
            - name: Initiate Instance Refresh
              id: refresh
              run: |
                REFRESH_ID=$(aws autoscaling start-instance-refresh \
                  --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
                  --query "InstanceRefreshId" --output text)
                echo "REFRESH_ID=${REFRESH_ID}" >> $GITHUB_ENV
      
            - name: Wait for Instance Refresh to Complete
              run: |
                TIMEOUT=600
                ELAPSED=0
                STATUS="InProgress"
                while [ "$STATUS" == "InProgress" ]; do
                  sleep 30
                  ELAPSED=$((ELAPSED + 30))
                  if [ $ELAPSED -ge $TIMEOUT ]; then
                    echo "Instance refresh timed out after $ELAPSED seconds.."
                    exit 1
                  fi
                  STATUS=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
                    --query "InstanceRefreshes[?InstanceRefreshId=='${REFRESH_ID}'].Status" \
                    --output text)
                  if [ -z "$STATUS" ]; then
                    echo "Failed to fetch instance refresh status. Exiting."
                    exit 1
                  fi
                  echo "Current Status: $STATUS"
                done

                if [ "$STATUS" == "Successful" ]; then
                  echo "Instance refresh completed successfully."
                else
                  echo "Instance refresh failed with status: $STATUS."
                  exit 1
                fi