name: App CI Pipeline

on: 
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
    integration-test:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest

        services:
          db:
              image: mysql:8.0
              env:
                  MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
                  MYSQL_DATABASE: ${{secrets.DB_NAME}}
              ports:
                  - 3306:3306
              options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Install dependencies
              run: npm install

            - name: Run tests
              env:
                  DB_NAME: ${{secrets.DB_NAME}}
                  DB_HOST: ${{secrets.DB_HOST}}
                  DB_DIALECT: ${{secrets.DB_DIALECT}}
                  DB_USERNAME: ${{secrets.DB_USERNAME}}
                  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
                  PORT: ${{secrets.PORT}}
              run: npm test

    build-artifact:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        needs: integration-test

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            # build on github actions runner
            - name: Create zip artifact
              run: zip -r webapp.zip . -x 'tests/*'
                echo "Artifact created"

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                name: app-artifact
                path: webapp.zip

    build-ami:
      if: github.event.pull_request.merged == true
      runs-on: ubuntu-latest
      needs: build-artifact
  
      steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION_DEV }}

            - name: Download application artifact
              uses: actions/download-artifact@v4
              with:
                name: app-artifact
                path: ./app

            - name: Unzip application artifact
              run: |
                unzip ./app/webapp.zip -d /opt

            # Build the AMI using Packer
            - name: Build AMI with Packer
              run: |
                packer init ./packer
                packer build ./packer
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws_region: ${{ secrets.AWS_REGION_DEV }}
                instance_type: ${{ secrets.INSTANCE_TYPE }}
                source_ami: ${{ secrets.SOURCE_AMI }}
                ssh_username: ${{ secrets.SSH_USERNAME }}
                subnet_id: ${{ secrets.SUBNET_ID }}
                vpc_id: ${{ secrets.VPC_ID }}
                db_name: ${{ secrets.DB_NAME }}
                db_password: ${{ secrets.DB_PASSWORD }}

            # Extract the AMI ID from Packer build output (replace with your method to capture it)
            - name: Get AMI ID
              id: ami
              run: |
                AMI_ID=$(packer build -machine-readable ./packer/aws-ubuntu.pkr.hcl | grep 'artifact,0,id' | cut -d, -f6 | cut -d: -f2)
                echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

            # # Install AWS CLI
            # - name: Install AWS CLI
            #   run: sudo apt-get install -y awscli

            # Share the AMI with the DEMO AWS account
            - name: Share AMI with DEMO account
              run: |
                aws ec2 modify-image-attribute \
                  --image-id ${{ env.AMI_ID }} \
                  --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}]"
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION_DEV }}

            # Make the AMI private
            - name: Make AMI Private
              run: |
                aws ec2 modify-image-attribute \
                  --image-id ${{ env.AMI_ID }} \
                  --launch-permission "Remove=[{Group=all}]"
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION_DEV }}