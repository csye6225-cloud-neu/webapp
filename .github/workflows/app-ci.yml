name: App CI Pipeline

on: 
  push:
    branches:
      - main

jobs:
    integration-test:
        runs-on: ubuntu-latest

        services:
          db:
              image: mysql:8.0
              env:
                  MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
                  MYSQL_DATABASE: ${{secrets.DB_NAME}}
              ports:
                  - 3306:3306
              options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Install dependencies
              run: npm install

            - name: Run tests
              env:
                  DB_NAME: ${{secrets.DB_NAME}}
                  DB_HOST: ${{secrets.DB_HOST}}
                  DB_DIALECT: ${{secrets.DB_DIALECT}}
                  DB_USERNAME: ${{secrets.DB_USERNAME}}
                  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
                  PORT: ${{secrets.PORT}}
              run: npm test

    build-artifact:
        runs-on: ubuntu-latest
        needs: integration-test

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            # build on github actions runner
            - name: Create zip artifact
              run: zip -r webapp.zip . -x 'tests/**' -x '.github/**'
                echo "Artifact created"

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                name: webapp
                path: webapp.zip

    build-ami:
      runs-on: ubuntu-latest
      needs: build-artifact
  
      steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION_DEV }}

            - name: Download application artifact
              uses: actions/download-artifact@v4
              with:
                name: webapp
                path: ./app

            - name: Unzip application artifact
              run: |
                unzip ./app/webapp.zip -d /opt

            # Build the AMI using Packer
            - name: Build AMI with Packer
              run: |
                packer init ./packer
                packer build \
                  -var 'source_ami=${{ secrets.SOURCE_AMI }}' \
                  -var 'instance_type=${{ secrets.INSTANCE_TYPE }}' \
                  -var 'ssh_username=${{ secrets.SSH_USERNAME }}' \
                  -var 'subnet_id=${{ secrets.SUBNET_ID }}' \
                  -var 'vpc_id=${{ secrets.VPC_ID }}' \
                  -var 'aws_region=${{ secrets.AWS_REGION_DEV }}' \
                  -var 'github_token=${{ secrets.TOKEN_GITHUB }}' \
                  -var 'github_repo=${{ github.repository }}' \
                  ./packer/aws-ubuntu.pkr.hcl
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: ${{ secrets.AWS_REGION_DEV }}